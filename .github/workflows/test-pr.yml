name: Test Pull Request

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - '.github/workflows/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Node.js dependencies
        run: npm install
        
      - name: Run content validation
        run: python scripts/validate-content.py
        
      - name: Test MkDocs build
        run: mkdocs build --clean --strict
        
      - name: Lint Markdown files
        run: npm run lint:markdown
        continue-on-error: true
        
      - name: Comment PR with test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ü§ñ Test Results')
            );
            
            const testStatus = '${{ job.status }}' === 'success' ? '‚úÖ All tests passed!' : '‚ùå Some tests failed';
            const body = `ü§ñ Test Results
            
            ${testStatus}
            
            **Build Status:** ${{ job.status }}
            **Commit:** ${context.sha.substring(0, 7)}
            
            View detailed results in the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}).`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }